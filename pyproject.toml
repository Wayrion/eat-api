[project]
name = "eat-api"
version = "0.1.0"
description = "Simple API for some (student) food places in Munich."
authors = [{ name = "TUM-Dev" }]
license = "MIT"
readme = "README.md"
requires-python = ">= 3.9"
dependencies = [
    "lxml~=6.0",
    "pyopenmensa~=0.95",
    "requests~=2.32",
    "deepl>=1.2.1",
]

[dependency-groups]
dev = [
    "mypy~=1.14",
    "pre-commit~=4.1",
    "pytest~=8.3",
    "ruff>=0.11.4",
    "types-requests~=2.32",
]

[project.urls]
homepage = "https://eat-api.tum.sexy/"
repository = "https://github.com/TUM-Dev/eat-api"
issues = "https://github.com/TUM-Dev/eat-api/issues"
documentation = "https://tum-dev.github.io/eat-api/docs/"

[tool.mypy]
ignore_missing_imports = true
disallow_incomplete_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
no_implicit_reexport = true
strict_equality = true
pretty = true

[tool.pytest]
ini_options = { pythonpath = "src" }

[tool.ruff]
line-length = 120

[tool.ruff.format]
line-ending = "lf"

[tool.ruff.lint]
select = [
    "F", # flake8
    "I", # isort
    "E", "W", # pep8 = pycodestyle
    "PGH004", # pygrep-hooks check-blanket-noqa
    "PYI033", # pygrep-hooks use-type-annotations
    "COM", # flake8-commas
    "B", # flake8-bugbear, B006 = flake8-mutable
    "C4", # flake8-comprehensions
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "T203", # flake8-print
    "S", # flake8-bandit = bandit
    "F541", "FLY002", # flake8-use-fstrings
    "PL", # pylint
]
ignore = [
    "COM812", # handled by formatter
    "B028", # warn should output the line it's called on
    "SIM108", # ternary is less readable than if-else
    "PLW2901", # assign to for loop variable
    # TODO code quality
    "PLR0912", "PLR0915", "PLR0914", # too many branches / statements / local variables
    "PLR1702", # too many nested blocks
    "PLR2004", # magic values
    "PLR6201", # use sets for contains
    "PLW1641", # should use dataclass
]
